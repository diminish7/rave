module Rave
  module Mixins
    # Abstract object that allows you to create instances of the classes inside
    # it based on providing a type name.
    module ObjectFactory
      WILDCARD = '*' unless defined? WILDCARD

      def self.included(base)
        base.class_eval do
          # Store the registered classes in a class instance variable.
          class << self
            attr_reader :class_by_type_mapping
            attr_reader :class_by_pattern_mapping
          end

          @class_by_type_mapping = {}
          @class_by_pattern_mapping = {}

          class_eval(<<-END, __FILE__, __LINE__)
            def self.classes_by_type
              ::#{self.name}.class_by_type_mapping
            end
            def self.classes_by_pattern
              ::#{self.name}.class_by_pattern_mapping
            end
          END

          # Object factory method.
          #
          # :type - Type of object to create [String]
          def self.create(type, *args, &block)
            if classes_by_type.has_key? type
              return classes_by_type[type].new(*args, &block)
            elsif
              # Check for pattern-based types. Check for longer matches before shorter ones.
              patterns = classes_by_pattern.keys.sort { |a, b| b.to_s.length <=> a.to_s.length }
              patterns.each do |pattern|
                if type =~ pattern
                  return classes_by_pattern[pattern].new($1, *args, &block)
                end
              end
              raise ArgumentError.new("Unknown #{self} type #{type}")
            end
          end

          # Is this type able to be created?
          def self.valid_type?(type)
            classes_by_type.has_key? type
          end

          # Register this class with its factory.
          def self.factory_register(type)
            classes_by_type[type] = self

            # * in a type indicates a wildcard.
            if type[WILDCARD]
              classes_by_pattern[/^#{type.sub(WILDCARD, '(.*)')}$/] = self
            end

            class << self
              def type; @type.dup; end
            end

            @type = type

          end

          # Classes that can be generated by the factory [Array of Class]
          def self.classes
            classes_by_type.values
          end

          # Types that can be generated by the factory [Array of String]
          def self.types
            classes_by_type.keys
          end
        end
      end

      # Type name for this class [String]
      attr_reader :type
      def type # :nodoc:
        self.class.type
      end
    end
  end
end
